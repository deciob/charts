{"absId":"wire/lib/array","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/array.js","source":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){ 'use strict';\ndefine(function() {\n\n\n\tvar slice = [].slice;\n\n\treturn {\n\t\tdelegate: delegateArray,\n\t\tfromArguments: fromArguments,\n\t\tunion: union\n\t};\n\n\t/**\n\t * Creates a new {Array} with the same contents as array\n\t * @param array {Array}\n\t * @return {Array} a new {Array} with the same contents as array. If array is falsey,\n\t *  returns a new empty {Array}\n\t */\n\tfunction delegateArray(array) {\n\t\treturn array ? [].concat(array) : [];\n\t}\n\n\tfunction fromArguments(args, index) {\n\t\treturn slice.call(args, index||0);\n\t}\n\n\t/**\n\t * Returns a new set that is the union of the two supplied sets\n\t * @param {Array} a1 set\n\t * @param {Array} a2 set\n\t * @returns {Array} union of a1 and a2\n\t */\n\tfunction union(a1, a2) {\n\t\t// If either is empty, return the other\n\t\tif(!a1.length) {\n\t\t\treturn a2.slice();\n\t\t} else if(!a2.length) {\n\t\t\treturn a1.slice();\n\t\t}\n\n\t\treturn a2.reduce(function(union, a2item) {\n\t\t\tif(union.indexOf(a2item) === -1) {\n\t\t\t\tunion.push(a2item);\n\t\t\t}\n\t\t\treturn union;\n\t\t}, a1.slice());\n\t}\n\n});\n})(typeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(factory) { module.exports = factory(); }\n);","modules":[{"pos":197,"count":18,"factory":true,"id":"wire/lib/array"}],"compileTime":"2014-03-24T21:53:07.504Z"}