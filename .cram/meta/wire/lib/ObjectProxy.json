{"absId":"wire/lib/ObjectProxy","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/ObjectProxy.js","source":"/** @license MIT License (c) copyright 2010-2013 original author or authors */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @author: Brian Cavalier\n * @author: John Hann\n */\n\n(function(define) { 'use strict';\ndefine(function(require) {\n\n\tvar WireProxy, extend, before, meld, advise, superDestroy;\n\n\tWireProxy = require('./WireProxy');\n\textend = require('./object').extend;\n\tbefore = require('./advice').before;\n\tmeld = require('meld');\n\n\t// FIXME: Remove support for meld.add after deprecation period\n\tadvise = typeof meld === 'function' ? meld : meld.add;\n\n\tsuperDestroy = WireProxy.prototype.destroy;\n\n\tfunction ObjectProxy(target) {\n\t\tWireProxy.apply(this, arguments);\n\t}\n\n\tObjectProxy.prototype = extend(WireProxy.prototype, {\n\t\t/**\n\t\t * Add an aspect to the proxy's target. Sub-types should\n\t\t * override to add aspects in whatever specialized way is\n\t\t * necessary.\n\t\t * @param {String|Array|RegExp|Function} pointcut\n\t\t *  expression matching methods to be advised\n\t\t * @param {Object} aspect aspect to add\n\t\t * @returns {{remove:function}} object with remove() that\n\t\t *  will remove the aspect.\n\t\t */\n\t\tadvise: function(pointcut, aspect) {\n\t\t\treturn advise(this.target, pointcut, aspect);\n\t\t}\n\n\n\t});\n\n\treturn ObjectProxy;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));\n","modules":[{"pos":267,"count":25,"factory":true,"argList":["require"],"requires":[{"id":"./WireProxy","pos":369,"count":22},{"id":"./object","pos":403,"count":19},{"id":"./advice","pos":441,"count":19},{"id":"meld","pos":477,"count":15}],"id":"wire/lib/ObjectProxy"}],"compileTime":"2014-03-24T21:53:07.512Z"}