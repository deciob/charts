{"absId":"wire/lib/loader/moduleId","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/loader/moduleId.js","source":"/** @license MIT License (c) copyright 2010-2013 original author or authors */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @author: Brian Cavalier\n * @author: John Hann\n */\n(function(define) { 'use strict';\ndefine(function() {\n\n\treturn {\n\t\tbase: base,\n\t\tresolve: resolve\n\t};\n\n\t/**\n\t * Given a moduleId, returns the \"basename\".  For example:\n\t * base('foo/bar/baz') -> 'foo/bar'\n\t * base('foo') -> 'foo'\n\t * @param id\n\t * @returns {*}\n\t */\n\tfunction base(id) {\n\t\tif(!id) {\n\t\t\treturn '';\n\t\t}\n\n\t\tvar split = id.lastIndexOf('/');\n\t\treturn split >= 0 ? id.slice(0, split) : id;\n\t}\n\n\t/**\n\t * Resolve id against base (which is also an id), such that the\n\t * returned resolved id contains no leading '.' or '..'\n\t * components.  Id may be relative or absolute, and may also\n\t * be an AMD plugin plus resource id, in which case both the\n\t * plugin id and the resource id may be relative or absolute.\n\t * @param {string} base module id against which id will be resolved\n\t * @param {string} id module id to resolve, may be an\n\t *  AMD plugin+resource id.\n\t * @returns {string} resolved id with no leading '.' or '..'\n\t *  components.  If the input id was an AMD plugin+resource id,\n\t *  both the plugin id and the resource id will be resolved in\n\t *  the returned id (thus neither will have leading '.' or '..'\n\t *  components)\n\t */\n\tfunction resolve(base, id) {\n\t\tif(typeof id != 'string') {\n\t\t\treturn base;\n\t\t}\n\n\t\treturn id.split('!').map(function(part) {\n\t\t\treturn resolveId(base, part.trim());\n\t\t}).join('!');\n\t}\n\n\tfunction resolveId(base, id) {\n\t\tvar up, prefix;\n\n\t\tif(id == '' || id == '.' || id == './') {\n\t\t\treturn base;\n\t\t}\n\n\t\tif(id[0] != '.') {\n\t\t\treturn id;\n\t\t}\n\n\t\tprefix = base;\n\n\t\tif(id == '..' || id == '../') {\n\t\t\tup = 1;\n\t\t\tid = '';\n\t\t} else {\n\t\t\tup = 0;\n\t\t\tid = id.replace(/^(\\.\\.?\\/)+/, function(s) {\n\t\t\t\ts.replace(/\\.\\./g, function(s) {\n\t\t\t\t\tup++;\n\t\t\t\t\treturn s;\n\t\t\t\t});\n\t\t\t\treturn '';\n\t\t\t});\n\n\t\t\tif(id == '..') {\n\t\t\t\tup++;\n\t\t\t\tid = '';\n\t\t\t} else if(id == '.') {\n\t\t\t\tid = '';\n\t\t\t}\n\t\t}\n\n\t\tif(up > 0) {\n\t\t\tprefix = prefix.split('/');\n\t\t\tup = Math.max(0, prefix.length - up);\n\t\t\tprefix = prefix.slice(0, up).join('/');\n\t\t}\n\n\t\tif(id.length && id[0] !== '/' && prefix[prefix.length-1] !== '/') {\n\t\t\tprefix += '/';\n\t\t}\n\n\t\tif(prefix[0] == '/') {\n\t\t\tprefix = prefix.slice(1);\n\t\t}\n\n\t\treturn prefix + id;\n\t}\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","modules":[{"pos":266,"count":18,"factory":true,"id":"wire/lib/loader/moduleId"}],"compileTime":"2014-03-24T21:53:04.313Z"}