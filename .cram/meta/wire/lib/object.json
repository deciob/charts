{"absId":"wire/lib/object","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/object.js","source":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function(define){ 'use strict';\ndefine(function() {\n\n\tvar hasOwn;\n\n\thasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty);\n\n\treturn {\n\t\thasOwn: hasOwn,\n\t\tisObject: isObject,\n\t\tinherit: inherit,\n\t\tmixin: mixin,\n\t\textend: extend\n\t};\n\n\tfunction isObject(it) {\n\t\t// In IE7 tos.call(null) is '[object Object]'\n\t\t// so we need to check to see if 'it' is\n\t\t// even set\n\t\treturn it && Object.prototype.toString.call(it) == '[object Object]';\n\t}\n\n\tfunction inherit(parent) {\n\t\treturn parent ? Object.create(parent) : {};\n\t}\n\n\t/**\n\t * Brute force copy own properties from -> to. Effectively an\n\t * ES6 Object.assign polyfill, usable with Array.prototype.reduce.\n\t * @param {object} to\n\t * @param {object} from\n\t * @returns {object} to\n\t */\n\tfunction mixin(to, from) {\n\t\tif(!from) {\n\t\t\treturn to;\n\t\t}\n\n\t\treturn Object.keys(from).reduce(function(to, key) {\n\t\t\tto[key] = from[key];\n\t\t\treturn to;\n\t\t}, to);\n\t}\n\n\t/**\n\t * Beget a new object from base and then mixin own properties from\n\t * extensions.  Equivalent to mixin(inherit(base), extensions)\n\t * @param {object} base\n\t * @param {object} extensions\n\t * @returns {object}\n\t */\n\tfunction extend(base, extensions) {\n\t\treturn mixin(inherit(base), extensions);\n\t}\n\n});\n})(typeof define == 'function'\n\t// AMD\n\t? define\n\t// CommonJS\n\t: function(factory) { module.exports = factory(); }\n);","modules":[{"pos":197,"count":18,"factory":true,"id":"wire/lib/object"}],"compileTime":"2014-03-24T21:53:07.501Z"}