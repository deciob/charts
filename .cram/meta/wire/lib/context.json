{"absId":"wire/lib/context","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/context.js","source":"/** @license MIT License (c) copyright 2010-2013 original author or authors */\n\n/**\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @author: Brian Cavalier\n * @author: John Hann\n */\n(function(define){ 'use strict';\ndefine(function(require) {\n\n\tvar when, mixin, loaderAdapter, relativeLoader, Container;\n\n\twhen = require('when');\n\tmixin = require('./object').mixin;\n\tloaderAdapter = require('./loader/adapter');\n\trelativeLoader = require('./loader/relative');\n\tContainer = require('./Container');\n\n\t/**\n\t * Creates a new context from the supplied specs, with the supplied\n\t * parent context. If specs is an {Array}, it may be a mixed array\n\t * of string module ids, and object literal specs.  All spec module\n\t * ids will be loaded, and then all specs will be merged from\n\t * left-to-right (rightmost wins), and the resulting, merged spec will\n\t * be wired.\n\t * @private\n\t *\n\t * @param {String|Object|String[]|Object[]} specs\n\t * @param {Object} parent context\n\t * @param {Object} [options]\n\t *\n\t * @return {Promise} a promise for the new context\n\t */\n\treturn function createContext(specs, parent, options) {\n\t\t// Do the actual wiring after all specs have been loaded\n\n\t\tif(!options) { options = {}; }\n\t\tif(!parent)  { parent  = {}; }\n\n\t\toptions.createContext = createContext;\n\n\t\tvar specLoader = createSpecLoader(parent.moduleLoader, options.require);\n\n\t\treturn when(specs, function(specs) {\n\t\t\toptions.moduleLoader =\n\t\t\t\tcreateContextLoader(specLoader, findBaseId(specs));\n\n\t\t\treturn mergeSpecs(specLoader, specs).then(function(spec) {\n\n\t\t\t\tvar container = new Container(parent, options);\n\n\t\t\t\t// Expose only the component instances and controlled API\n\t\t\t\treturn container.init(spec).then(function(context) {\n\t\t\t\t\treturn context.instances;\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\tfunction createContextLoader(parentLoader, baseId) {\n\t\treturn baseId ? relativeLoader(parentLoader, baseId) : parentLoader;\n\t}\n\n\t/**\n\t * Create a module loader\n\t * @param {function} [platformLoader] platform require function with which\n\t *  to configure the module loader\n\t * @param {function} [parentLoader] existing module loader from which\n\t *  the new module loader will inherit, if provided.\n\t * @return {Object} module loader with load() and merge() methods\n\t */\n\tfunction createSpecLoader(parentLoader, platformLoader) {\n\t\tvar loadModule = typeof platformLoader == 'function'\n\t\t\t? loaderAdapter(platformLoader)\n\t\t\t: parentLoader || loaderAdapter(require);\n\n\t\treturn loadModule;\n\t}\n\n\tfunction findBaseId(specs) {\n\t\tvar firstId;\n\n\t\tif(typeof specs === 'string') {\n\t\t\treturn specs;\n\t\t}\n\n\t\tif(!Array.isArray(specs)) {\n\t\t\treturn;\n\t\t}\n\n\t\tspecs.some(function(spec) {\n\t\t\tif(typeof spec === 'string') {\n\t\t\t\tfirstId = spec;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t\treturn firstId;\n\t}\n\n\tfunction mergeSpecs(moduleLoader, specs) {\n\t\treturn when(specs, function(specs) {\n\t\t\treturn when.resolve(Array.isArray(specs)\n\t\t\t\t? mergeAll(moduleLoader, specs)\n\t\t\t\t: (typeof specs === 'string' ? moduleLoader(specs) : specs));\n\t\t});\n\t}\n\n\tfunction mergeAll(moduleLoader, specs) {\n\t\treturn when.reduce(specs, function(merged, module) {\n\t\t\treturn typeof module == 'string'\n\t\t\t\t? when(moduleLoader(module), function(spec) { return mixin(merged, spec); })\n\t\t\t\t: mixin(merged, module);\n\t\t}, {});\n\t}\n\n});\n}(typeof define === 'function' ? define : function(factory) { module.exports = factory(require); }));\n","modules":[{"pos":265,"count":25,"factory":true,"argList":["require"],"requires":[{"id":"when","pos":362,"count":15},{"id":"./object","pos":388,"count":19},{"id":"./loader/adapter","pos":432,"count":27},{"id":"./loader/relative","pos":479,"count":28},{"id":"./Container","pos":522,"count":22}],"id":"wire/lib/context"}],"compileTime":"2014-03-24T21:53:07.516Z"}