{"absId":"wire/lib/graph/DirectedGraph","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/lib/graph/DirectedGraph.js","source":"/** @license MIT License (c) copyright B Cavalier & J Hann */\n\n/**\n * DirectedGraph\n * @author: brian@hovercraftstudios.com\n */\n(function(define) {\ndefine(function() {\n\n\t/**\n\t * A simple directed graph\n\t * @constructor\n\t */\n\tfunction DirectedGraph() {\n\t\tthis.vertices = {};\n\t}\n\n\tDirectedGraph.prototype = {\n\t\t/**\n\t\t * Add a new edge from one vertex to another\n\t\t * @param {string} from vertex at the tail of the edge\n\t\t * @param {string} to vertex at the head of the edge\n\t\t */\n\t\taddEdge: function(from, to) {\n\t\t\tthis._getOrCreateVertex(to);\n\t\t\tthis._getOrCreateVertex(from).edges[to] = 1;\n\t\t},\n\n\t\t/**\n\t\t * Adds and initializes new vertex, or returns an existing vertex\n\t\t * if one with the supplied name already exists\n\t\t * @param {string} name vertex name\n\t\t * @return {object} the new vertex, with an empty edge set\n\t\t * @private\n\t\t */\n\t\t_getOrCreateVertex: function(name) {\n\t\t\tvar v = this.vertices[name];\n\t\t\tif(!v) {\n\t\t\t\tv = this.vertices[name] = { name: name, edges: {} };\n\t\t\t}\n\n\t\t\treturn v;\n\t\t},\n\n\t\t/**\n\t\t * Removes an edge, if it exits\n\t\t * @param {string} from vertex at the tail of the edge\n\t\t * @param {string} to vertex at the head of the edge\n\t\t */\n\t\tremoveEdge: function(from, to) {\n\t\t\tvar outbound = this.vertices[from];\n\t\t\tif(outbound) {\n\t\t\t\tdelete outbound.edges[to];\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Calls lambda once for each vertex in the graph passing\n\t\t * the vertex as the only param.\n\t\t * @param {function} lambda\n\t\t */\n\t\teachVertex: function(lambda) {\n\t\t\tvar vertices, v;\n\n\t\t\tvertices = this.vertices;\n\t\t\tfor(v in vertices) {\n\t\t\t\tlambda(vertices[v]);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Calls lambda once for every outbound edge of the supplied vertex\n\t\t * @param {string} vertex vertex name whose edges will be passed to lambda\n\t\t * @param {function} lambda\n\t\t */\n\t\teachEdgeFrom: function(vertex, lambda) {\n\t\t\tvar v, e, vertices;\n\n\t\t\tvertices = this.vertices;\n\t\t\tv = vertices[vertex];\n\n\t\t\tif(!v) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor(e in v.edges) {\n\t\t\t\tlambda(v, vertices[e]);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn DirectedGraph;\n\n});\n}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));\n","modules":[{"pos":148,"count":18,"factory":true,"id":"wire/lib/graph/DirectedGraph"}],"compileTime":"2014-03-24T21:53:04.319Z"}