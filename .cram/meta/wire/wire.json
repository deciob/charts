{"absId":"wire/wire","url":"/home/decio/dev/personal/nightcharts-gh/bower_components/wire/wire.js","source":"/** @license MIT License (c) copyright 2011-2013 original author or authors */\n\n/**\n * wire\n * Javascript IOC Container\n *\n * wire is part of the cujoJS family of libraries (http://cujojs.com/)\n *\n * Licensed under the MIT License at:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * @author Brian Cavalier\n * @author John Hann\n * @version 0.10.6\n */\n(function(rootSpec, define){ 'use strict';\ndefine(function(require) {\n\n\tvar createContext, rootContext, rootOptions;\n\n\twire.version = '0.10.6';\n\n\tcreateContext = require('./lib/context');\n\n\trootOptions = { require: require };\n\n\t/**\n\t * Main Programmtic API.  The top-level wire function that wires contexts\n\t * as direct children of the (possibly implicit) root context.  It ensures\n\t * that the root context has been wired before wiring children.\n\t *\n\t * @public\n\t *\n\t * @param spec {Object|String|Array|Promise} can be any one of the following:\n\t *  1. Object - wiring spec\n\t *  2. String - module id of the wiring spec to load and then wire\n\t *  3. Array - mixed array of Strings and Objects, each of which is either\n\t *   a wiring spec, or the module id of a wiring spec\n\t *  4. Promise - a promise for any of the above\n\t *  @param options {Object} wiring options\n\t *  @param [options.require] {Function} the platform loader function.  Wire will\n\t *   attempt to automatically detect what loader to use (AMD, CommonJS, etc.), but\n\t *   if you want to explicitly provide it, you can do so.  In some cases this can\n\t *   be useful such as providing a local AMD require function so that module ids\n\t *   *within the wiring spec* can be relative.\n\t *  @return {Promise} a promise for the resulting wired context\n\t */\n\tfunction wire(spec, options) {\n\n\t\t// If the root context is not yet wired, wire it first\n\t\tif (!rootContext) {\n\t\t\trootContext = createContext(rootSpec, null, rootOptions);\n\t\t}\n\n\t\t// Use the rootContext to wire all new contexts.\n\t\treturn rootContext.then(function (root) {\n\t\t\treturn root.wire(spec, options);\n\t\t});\n\t}\n\n\t/**\n\t * AMD Loader plugin API\n\t * @param name {String} spec module id, or comma-separated list of module ids\n\t * @param require {Function} loader-provided local require function\n\t * @param done {Function} loader-provided callback to call when wiring\n\t *  is completed. May have and error property that a function to call to\n\t *  inform the AMD loader of an error.\n\t *  See here:\n\t *  https://groups.google.com/forum/?fromgroups#!topic/amd-implement/u0f161drdJA\n\t */\n\twire.load = function amdLoad(name, require, done /*, config */) {\n\t\t// If it's a string, try to split on ',' since it could be a comma-separated\n\t\t// list of spec module ids\n\t\twire(name.split(','), { require: require })\n\t\t\t.then(done, done.error)\n\t\t\t.otherwise(crash);\n\n\t\tfunction crash(e) {\n\t\t\t// Throw uncatchable exception for loaders that don't support\n\t\t\t// AMD error handling.  This will propagate up to the host environment\n\t\t\tsetTimeout(function() { throw e; }, 0);\n\t\t}\n\t};\n\n\t/**\n\t * AMD Builder plugin API\n\t */\n\t// pluginBuilder: './builder/rjs'\n\twire['pluginBuilder'] = './builder/rjs';\n\twire['cramPlugin'] = './builder/cram';\n\n\treturn wire;\n\n});\n})(\n\tthis['wire'] || {},\n\ttypeof define == 'function' && define.amd\n\t\t? define : function(factory) { module.exports = factory(require); }\n);","modules":[{"pos":405,"count":25,"factory":true,"argList":["require"],"requires":[{"id":"./lib/context","pos":524,"count":24}],"id":"wire/wire"}],"compileTime":"2014-03-24T21:53:07.516Z"}