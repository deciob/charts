{"absId":"d3_tip","url":"/home/decio/dev/personal/nightcharts-gh/lib/d3-tip/index.js","source":"// d3.tip\n// Copyright (c) 2013 Justin Palmer\n//\n// Tooltips for d3.js SVG visualizations\n\n// Public - contructs a new tooltip\n//\n// Returns a tip\n\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['d3'], factory);\n  } else {\n    // Browser globals\n    root.d3.tip = factory(root.d3);\n  }\n}(this, function (d3) {\n    \n  return function() {\n    var direction = d3_tip_direction,\n        offset    = d3_tip_offset,\n        html      = d3_tip_html,\n        node      = initNode(),\n        svg       = null,\n        point     = null,\n        target    = null\n  \n    function tip(vis) {\n      svg = getSVGNode(vis)\n      point = svg.createSVGPoint()\n      document.body.appendChild(node)\n    }\n  \n    // Public - show the tooltip on the screen\n    //\n    // Returns a tip\n    tip.show = function() {\n      var args = Array.prototype.slice.call(arguments)\n      if(args[args.length - 1] instanceof SVGElement) target = args.pop()\n  \n      var content = html.apply(this, args),\n          poffset = offset.apply(this, args),\n          dir     = direction.apply(this, args),\n          nodel   = d3.select(node), i = 0,\n          coords\n  \n      nodel.html(content)\n        .style({ opacity: 1, 'pointer-events': 'all' })\n  \n      while(i--) nodel.classed(directions[i], false)\n      coords = direction_callbacks.get(dir).apply(this)\n      nodel.classed(dir, true).style({\n        top: (coords.top +  poffset[0]) + 'px',\n        left: (coords.left + poffset[1]) + 'px'\n      })\n  \n      return tip\n    }\n  \n    // Public - hide the tooltip\n    //\n    // Returns a tip\n    tip.hide = function() {\n      nodel = d3.select(node)\n      nodel.style({ opacity: 0, 'pointer-events': 'none' })\n      return tip\n    }\n  \n    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.\n    //\n    // n - name of the attribute\n    // v - value of the attribute\n    //\n    // Returns tip or attribute value\n    tip.attr = function(n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return d3.select(node).attr(n)\n      } else {\n        var args =  Array.prototype.slice.call(arguments)\n        d3.selection.prototype.attr.apply(d3.select(node), args)\n      }\n  \n      return tip\n    }\n  \n    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.\n    //\n    // n - name of the property\n    // v - value of the property\n    //\n    // Returns tip or style property value\n    tip.style = function(n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return d3.select(node).style(n)\n      } else {\n        var args =  Array.prototype.slice.call(arguments)\n        d3.selection.prototype.style.apply(d3.select(node), args)\n      }\n  \n      return tip\n    }\n  \n    // Public: Set or get the direction of the tooltip\n    //\n    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),\n    //     sw(southwest), ne(northeast) or se(southeast)\n    //\n    // Returns tip or direction\n    tip.direction = function(v) {\n      if (!arguments.length) return direction\n      direction = v == null ? v : d3.functor(v)\n  \n      return tip\n    }\n  \n    // Public: Sets or gets the offset of the tip\n    //\n    // v - Array of [x, y] offset\n    //\n    // Returns offset or\n    tip.offset = function(v) {\n      if (!arguments.length) return offset\n      offset = v == null ? v : d3.functor(v)\n  \n      return tip\n    }\n  \n    // Public: sets or gets the html value of the tooltip\n    //\n    // v - String value of the tip\n    //\n    // Returns html value or tip\n    tip.html = function(v) {\n      if (!arguments.length) return html\n      html = v == null ? v : d3.functor(v)\n  \n      return tip\n    }\n  \n    function d3_tip_direction() { return 'n' }\n    function d3_tip_offset() { return [0, 0] }\n    function d3_tip_html() { return ' ' }\n  \n    var direction_callbacks = d3.map({\n      n:  direction_n,\n      s:  direction_s,\n      e:  direction_e,\n      w:  direction_w,\n      nw: direction_nw,\n      ne: direction_ne,\n      sw: direction_sw,\n      se: direction_se\n    }),\n  \n    directions = direction_callbacks.keys()\n  \n    function direction_n() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.n.y - node.offsetHeight,\n        left: bbox.n.x - node.offsetWidth / 2\n      }\n    }\n  \n    function direction_s() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.s.y,\n        left: bbox.s.x - node.offsetWidth / 2\n      }\n    }\n  \n    function direction_e() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.e.y - node.offsetHeight / 2,\n        left: bbox.e.x\n      }\n    }\n  \n    function direction_w() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.w.y - node.offsetHeight / 2,\n        left: bbox.w.x - node.offsetWidth\n      }\n    }\n  \n    function direction_nw() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.nw.y - node.offsetHeight,\n        left: bbox.nw.x - node.offsetWidth\n      }\n    }\n  \n    function direction_ne() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.ne.y - node.offsetHeight,\n        left: bbox.ne.x\n      }\n    }\n  \n    function direction_sw() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.sw.y,\n        left: bbox.sw.x - node.offsetWidth\n      }\n    }\n  \n    function direction_se() {\n      var bbox = getScreenBBox()\n      return {\n        top:  bbox.se.y,\n        left: bbox.e.x\n      }\n    }\n  \n    function initNode() {\n      var node = d3.select(document.createElement('div'))\n      node.style({\n        position: 'absolute',\n        opacity: 0,\n        pointerEvents: 'none',\n        boxSizing: 'border-box'\n      })\n  \n      return node.node()\n    }\n  \n    function getSVGNode(el) {\n      el = el.node()\n      if(el.tagName.toLowerCase() == 'svg')\n        return el\n  \n      return el.ownerSVGElement\n    }\n  \n    // Private - gets the screen coordinates of a shape\n    //\n    // Given a shape on the screen, will return an SVGPoint for the directions\n    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),\n    // sw(southwest).\n    //\n    //    +-+-+\n    //    |   |\n    //    +   +\n    //    |   |\n    //    +-+-+\n    //\n    // Returns an Object {n, s, e, w, nw, sw, ne, se}\n    function getScreenBBox() {\n      var targetel   = target || d3.event.target,\n          bbox       = {},\n          matrix     = targetel.getScreenCTM(),\n          tbbox      = targetel.getBBox(),\n          width      = tbbox.width,\n          height     = tbbox.height,\n          x          = tbbox.x,\n          y          = tbbox.y,\n          scrollTop  = document.documentElement.scrollTop || document.body.scrollTop,\n          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft\n  \n  \n      point.x = x + scrollLeft\n      point.y = y + scrollTop\n      bbox.nw = point.matrixTransform(matrix)\n      point.x += width\n      bbox.ne = point.matrixTransform(matrix)\n      point.y += height\n      bbox.se = point.matrixTransform(matrix)\n      point.x -= width\n      bbox.sw = point.matrixTransform(matrix)\n      point.y -= height / 2\n      bbox.w  = point.matrixTransform(matrix)\n      point.x += width\n      bbox.e = point.matrixTransform(matrix)\n      point.x -= width / 2\n      point.y -= height / 2\n      bbox.n = point.matrixTransform(matrix)\n      point.y += height\n      bbox.s = point.matrixTransform(matrix)\n  \n      return bbox\n    }\n  \n    return tip\n  };\n\n\n\n}));\n","modules":[{"pos":278,"count":14,"depList":["d3"],"id":"d3_tip"}],"compileTime":"2014-03-24T21:53:04.944Z"}